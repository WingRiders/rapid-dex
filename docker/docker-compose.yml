services:
  cardano-node:
    image: ghcr.io/intersectmbo/cardano-node:10.1.4
    restart: unless-stopped
    command:
      [
        "run",
        "--config",
        "/config/config.json",
        "--database-path",
        "/data/db",
        "--socket-path",
        "/ipc/node.socket",
        "--topology",
        "/config/topology.json",
      ]
    volumes:
      - ./server/config/network/${NETWORK:-mainnet}/cardano-node:/config
      - ./server/config/network/${NETWORK:-mainnet}/genesis:/genesis
      - node-db:/data
      - node-ipc:/ipc
    logging:
      driver: "json-file"
      options:
        max-size: "400k"
        max-file: "20"

  ogmios:
    image: cardanosolutions/ogmios:6.11.2
    restart: unless-stopped
    command:
      [
        "--host",
        "0.0.0.0",
        "--node-socket",
        "/ipc/node.socket",
        "--node-config",
        "/config/cardano-node/config.json",
      ]
    volumes:
      - ./server/config/network/${NETWORK:-mainnet}:/config
      - node-ipc:/ipc
    ports:
      - ${OGMIOS_PORT:-1337}:1337

  postgresql:
    image: postgres:16.2-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-wr}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pass}
      POSTGRES_DB: ${DB:-wingriders}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - ${DB_PORT:-5432}:5432

  backend:
    build:
      context: ../
      dockerfile: backend/Dockerfile
    ports:
      - "${BACKEND_SERVER_PORT}:${BACKEND_SERVER_PORT}"
    environment:
      - NODE_ENV=production
      - MODE=${BACKEND_MODE:-both}
      - SERVER_PORT=${BACKEND_SERVER_PORT}
      - DB=${DB:-wingriders}
      - DB_SCHEMA=${DB_SCHEMA:-rapid-dex}
      - DB_USER=${DB_USER:-wr}
      - DB_PASSWORD=${DB_PASSWORD:-pass}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - OGMIOS_HOST=${OGMIOS_HOST:-localhost}
      - OGMIOS_PORT=${OGMIOS_PORT:-1337}
      - CORS_ENABLED_FOR=${CORS_ENABLED_FOR}

  frontend:
    build:
      context: ../
      dockerfile: frontend/Dockerfile
    ports:
      - "${FRONTEND_SERVER_PORT}:${FRONTEND_SERVER_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${FRONTEND_SERVER_PORT}
      - SERVER_URL=${BACKEND_SERVER_URL}
      - NEXT_PUBLIC_SERVER_URL=${BACKEND_SERVER_PUBLIC_URL}

volumes:
  postgres:
  node-db:
  node-ipc:
